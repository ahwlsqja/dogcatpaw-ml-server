syntax = "proto3";

package nose_embedder;

// 강아지 코 임베딩 추출 서비스
service NoseEmbedderService {
  // 강아지 코 이미지에서 특징 벡터 추출
  rpc ExtractNoseVector(NoseImageRequest) returns (NoseVectorResponse);

  // gRPC 연결 상태 확인
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  // 새 이미지와 저장된 이미지(PetDID) 비교
  rpc CompareWithStoredImage(CompareWithStoredImageRequest) returns (CompareVectorsResponse);
}

// 강아지 코 이미지를 담은 요청 메시지
message NoseImageRequest {
  // 이미지 데이터 (JPEG 또는 PNG 바이트)
  bytes image_data = 1;

  // 선택사항: 이미지 포맷 (예: "jpeg", "png")
  string image_format = 2;
}

// 추출된 특징 벡터를 담은 응답 메시지
message NoseVectorResponse {
  // 특징 벡터 (임베딩)
  repeated float vector = 1;

  // 벡터의 차원 (크기)
  int32 vector_size = 2;

  // 성공 여부
  bool success = 3;

  // 에러 메시지 (실패시)
  string error_message = 4;
}

// 헬스체크 요청
message HealthCheckRequest {
  string service = 1;
}

// 헬스체크 응답
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;         // 알 수 없음
    SERVING = 1;         // 서비스 중
    NOT_SERVING = 2;     // 서비스 불가
    SERVICE_UNKNOWN = 3; // 서비스 미확인
  }

  ServingStatus status = 1;  // 서비스 상태
  string message = 2;         // 상태 메시지
  string model_loaded = 3;    // 모델 로드 상태
  string timestamp = 4;       // 타임스탬프
}

// 저장된 벡터와 비교 요청
message CompareWithStoredImageRequest {
  // 새로운 이미지 키 (NCP Object Storage 경로: nose-print-photo/${petDID}/${fileName})
  string image_key = 1;

  // Pet DID (NCP Object Storage에서 저장된 벡터 가져오기 위한 키)
  string pet_did = 2;
}

// 벡터 비교 응답
message CompareVectorsResponse {
  // 유사도 점수 (0.0 ~ 1.0)
  float similarity = 1;

  // 코사인 유사도
  float cosine_similarity = 2;

  // 유클리드 거리
  float euclidean_distance = 3;

  // 성공 여부
  bool success = 4;

  // 에러 메시지 (실패시)
  string error_message = 5;

  // 새 이미지의 벡터 차원
  int32 vector_size = 6;
}
